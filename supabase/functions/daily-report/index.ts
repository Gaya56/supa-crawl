import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.7'

serve(async (req: Request) => {
  try {
    console.log('Daily report function started')

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('Missing Supabase credentials')
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    // Get detailed table analysis
    const { data: tableStats, error: statsError } = await supabase.rpc('analyze_crawl4ai_docs')

    // Fallback query if RPC doesn't exist
    const { data: docs, error: docsError } = await supabase
      .from('Crawl4AI-Docs')
      .select('*')

    if (docsError) {
      throw new Error(`Failed to fetch data: ${docsError.message}`)
    }

    console.log(`Found ${docs?.length || 0} documents`)

    // Enhanced data analysis
    const totalDocs = docs?.length || 0
    const avgContentLength = Math.round(docs?.reduce((sum, doc) => sum + (doc.content?.length || 0), 0) / totalDocs)
    const docsWithSummary = docs?.filter(doc => doc.summary).length || 0
    const completionRate = Math.round((docsWithSummary / totalDocs) * 100)
    const docsWithTitle = docs?.filter(doc => doc.title).length || 0

    // Comprehensive HTML report with sections:
    // - Table Overview with statistics
    // - Data Quality Analysis  
    // - Sample Documentation Topics
    // - System Status & Health

    // Sample titles for categories
    const sampleTitles = docs?.slice(0, 5).map(doc => doc.title).filter(Boolean) || []

    // Create detailed report
    const reportDate = new Date().toISOString().split('T')[0]
    const reportTitle = `Daily Crawl4AI Documentation Report - ${new Date().toLocaleDateString()}`

    // Enhanced content with table analysis
    const detailedContent = `
    <h1>üìö Daily Crawl4AI Documentation Analysis</h1>
    
    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
      <h2>üìä Table Overview: Crawl4AI-Docs</h2>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
        <div style="background: white; padding: 10px; border-radius: 5px;">
          <strong>Total Documents:</strong> ${totalDocs}
        </div>
        <div style="background: white; padding: 10px; border-radius: 5px;">
          <strong>Completion Rate:</strong> ${completionRate}%
        </div>
        <div style="background: white; padding: 10px; border-radius: 5px;">
          <strong>Avg Content Length:</strong> ${avgContentLength} chars
        </div>
        <div style="background: white; padding: 10px; border-radius: 5px;">
          <strong>Data Integrity:</strong> ${docsWithTitle === totalDocs ? '‚úÖ Complete' : '‚ö†Ô∏è Partial'}
        </div>
      </div>
    </div>

    <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
      <h2>üîç Data Quality Analysis</h2>
      <ul style="margin: 10px 0; padding-left: 20px;">
        <li><strong>Documents with Titles:</strong> ${docsWithTitle}/${totalDocs} (${Math.round((docsWithTitle / totalDocs) * 100)}%)</li>
        <li><strong>Documents with Summaries:</strong> ${docsWithSummary}/${totalDocs} (${completionRate}%)</li>
        <li><strong>Content Coverage:</strong> ${docs?.filter(doc => doc.content).length || 0}/${totalDocs} documents</li>
      </ul>
    </div>

    <div style="background: #f3e5f5; padding: 15px; border-radius: 8px; margin: 20px 0;">
      <h2>üìñ Sample Documentation Topics</h2>
      <ul style="margin: 10px 0; padding-left: 20px;">
        ${sampleTitles.map(title => `<li>${title}</li>`).join('')}
      </ul>
    </div>

    <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0;">
      <h2>‚ö° System Status</h2>
      <p><strong>Report Generated:</strong> ${new Date().toLocaleString()}</p>
      <p><strong>Database Connection:</strong> ‚úÖ Active</p>
      <p><strong>Data Freshness:</strong> ‚úÖ Current</p>
      <p><strong>Next Report:</strong> Tomorrow at 9:00 AM UTC</p>
    </div>

    <hr style="margin: 30px 0; border: 1px solid #eee;">
    <p style="font-size: 12px; color: #666; text-align: center;">
      Generated by Crawl4AI Daily Reporter | 
      Supabase Edge Functions | 
      Table: Crawl4AI-Docs (${totalDocs} records)
    </p>
    `

    // Save to database
    const { data: reportData, error: saveError } = await supabase
      .from('daily_reports')
      .insert({
        report_date: reportDate,
        title: reportTitle,
        content: detailedContent,
        summary: `Comprehensive analysis of ${totalDocs} Crawl4AI documentation records`,
        documents_analyzed: totalDocs,
        categories_found: 3, // Overview, Quality, Status
        ai_insights: `Data integrity: ${completionRate}% complete, Avg content: ${avgContentLength} chars`,
        status: 'completed'
      })
      .select()

    if (saveError) {
      throw new Error(`Failed to save: ${saveError.message}`)
    }

    console.log('Report saved:', reportData?.[0]?.id)

    return new Response(JSON.stringify({
      success: true,
      report_id: reportData?.[0]?.id,
      documents_count: totalDocs,
      completion_rate: completionRate,
      avg_content_length: avgContentLength,
      message: 'Enhanced report saved to database'
    }), {
      headers: { 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
})
